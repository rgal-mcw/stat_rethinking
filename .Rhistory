install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
install.packages("cmdstanr")
# we recommend running this in a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
ways = sapply(p, function(q) (q*4)^W * (1-q) * 4)^L)
samples = c("W", "L", "W", "W", "W", "L", "W", "L", "W")
W = sum(sample == "W") # number of W observed
L = sum(sample == "L") # number of L observed
W = sum(samples == "W") # number of W observed
L = sum(samples == "L") # number of L observed
W
p = c(0, 0.25, 0.50, 0.75, 1) # Possible Proportions of L given a 4 sided globe
ways = sapply(p, function(q) (q*4)^W * ((1-q) * 4)^L) # This is our function, coded
prob = ways / sum(ways)
cbind(p,ways,prob)
### Code a generative simulation
sim_globe = function (p = 0.7, N = 9) { # Code our generative simulation (with defaults)
samples(c("W", "L"), size=N, prob=c(p, 1-p) replace=T)
### Code a generative simulation
sim_globe = function (p = 0.7, N = 9) { # Code our generative simulation (with defaults)
samples(c("W", "L"), size=N, prob=c(p, 1-p), replace=T)
}
sim_globe()
### Code a generative simulation
sim_globe = function (p = 0.7, N = 9) { # Code our generative simulation (with defaults)
samples(c("W", "L"), size=N, prob=c(p, 1-p), replace=T)
}
sim_globe()
### Code a generative simulation
sim_globe = function (p = 0.7, N = 9) { # Code our generative simulation (with defaults)
sample(c("W", "L"), size=N, prob=c(p, 1-p), replace=T)
}
sim_globe()
sim_globe()
sim_globe()
replicate(sim_globe(p=0.5, N=9), n=10) # Make 10 pulls
### We can use this function to compute the posterior (for 4 sided globe)
the_sample = replicate(sim_globe(p=0.5, N=9), n=10)
compute_positerior = function(the_sample, poss=c(0, 0.25, 0.5, 0.75, 1.00) ){
W = sum(the_sample == "W") # number of W observed
L = sum(the_sample == "L") # number of L observed
ways = sapply(poss, function(q) (q*4)^4 * ((1-q)*4)^L )
post = ways/sum(ways)
bars = sapply(post, function(q) make_bar(q) )
data.frame( poss, ways, post = round(post, 3), bars)
}
compute_positerior(sim_globe())
